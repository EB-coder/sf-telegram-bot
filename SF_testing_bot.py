import telebot
import random
import json
import os
from flask import Flask, request

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('BOT_TOKEN')
if not TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render")
    exit(1)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON
with open("quiz_questions.json", "r", encoding="utf-8") as f:
    questions = json.load(f)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@bot.message_handler(commands=["start"])
def start_bot(message):
    chat_id = message.chat.id
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "üéØ –≠–∫–∑–∞–º–µ–Ω")
    bot.send_message(
        chat_id,
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n"
        "‚Ä¢ üìö **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞** - –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥—Ä—è–¥\n"
        "‚Ä¢ üéØ **–≠–∫–∑–∞–º–µ–Ω** - 60 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
        reply_markup=markup
    )

@bot.message_handler(func=lambda msg: msg.text in ["üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "üéØ –≠–∫–∑–∞–º–µ–Ω"])
def select_mode(message):
    chat_id = message.chat.id
    mode = message.text
    
    if mode == "üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞":
        questions_to_use = questions.copy()
        random.shuffle(questions_to_use)
        user_data[chat_id] = {
            "remaining": questions_to_use,
            "correct": 0,
            "wrong": 0,
            "current": None,
            "mode": "preparation"
        }
        bot.send_message(chat_id, f"üìö –†–µ–∂–∏–º: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞\n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        
    elif mode == "üéØ –≠–∫–∑–∞–º–µ–Ω":
        questions_to_use = random.sample(questions, min(60, len(questions)))
        random.shuffle(questions_to_use)
        user_data[chat_id] = {
            "remaining": questions_to_use,
            "correct": 0,
            "wrong": 0,
            "current": None,
            "mode": "exam"
        }
        bot.send_message(chat_id, f"üéØ –†–µ–∂–∏–º: –≠–∫–∑–∞–º–µ–Ω\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions_to_use)}")
    
    markup = telebot.types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! üöÄ", reply_markup=markup)
    send_new_question(chat_id)

def send_new_question(chat_id):
    user = user_data.get(chat_id)
    if not user or not user["remaining"]:
        if user:
            total = user["correct"] + user["wrong"]
            mode_text = "üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞" if user["mode"] == "preparation" else "üéØ –≠–∫–∑–∞–º–µ–Ω"
            percentage = (user['correct'] / total * 100) if total > 0 else 0
            
            bot.send_message(
                chat_id,
                f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
                f"–†–µ–∂–∏–º: {mode_text}\n\n"
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {user['correct']}\n"
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {user['wrong']}\n"
                f"üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}\n"
                f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage:.1f}%"
            )
            
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add("üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "üéØ –≠–∫–∑–∞–º–µ–Ω")
            bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑?", reply_markup=markup)
            del user_data[chat_id]
        return

    q = user["remaining"].pop()
    user["current"] = q

    total_questions = len(user["remaining"]) + 1
    current_question = total_questions - len(user["remaining"])
    progress = f"({current_question}/{total_questions})"
    
    text = f"‚ùì {q['question']} {progress}\n\n"
    for letter, option in q["options"].items():
        text += f"{letter}. {option}\n"
    text += "\n–û—Ç–ø—Ä–∞–≤—å –±—É–∫–≤—É(-—ã) –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä A –∏–ª–∏ A,C):"

    bot.send_message(chat_id, text)

@bot.message_handler(func=lambda msg: True)
def handle_answer(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –Ω–∞–ø–∏—à–∏ /start")
        return

    user = user_data[chat_id]
    q = user["current"]

    if not q:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ ‚Äî –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    user_input = [x.strip().upper() for x in message.text.split(",") if x.strip()]
    correct_answers = q["answers"]

    if set(user_input) == set(correct_answers):
        user["correct"] += 1
        bot.send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        user["wrong"] += 1
        correct_text = ", ".join(correct_answers)
        bot.send_message(chat_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}")

    user["current"] = None
    send_new_question(chat_id)

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Render
@app.route('/')
def index():
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! ü§ñ"

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        return 'Bad request', 400

if __name__ == '__main__':
    # –ù–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.environ.get('PORT', 5000))
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
    bot.remove_webhook()
    
    # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    webhook_url = os.environ.get('WEBHOOK_URL', '')
    
    if webhook_url:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        full_webhook_url = f"{webhook_url}/webhook"
        print(f"üîÑ –ü—ã—Ç–∞—é—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫: {full_webhook_url}")
        
        try:
            bot.set_webhook(url=full_webhook_url)
            print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_webhook_url}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –≤–µ–±—Ö—É–∫–∞...")
    else:
        print("‚ö†Ô∏è  WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫–∏, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é WEBHOOK_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port)
